package HomeCo::AWS::BackupImageCacher;

use strict;
use base qw{ Exporter };
our @EXPORT = qw{ backup check_parameters };

sub backup () {
	$config = $_;

	# try to control parameters are checked. Can be circunvent, thou...
	check_parameters( $config ) unless defined $config->{_checked};

	eval {
		if ( $config->{Daily} ) {
			HomeCo::AWS::BackupImageCacher::_backup_daily( $config );
		} elsif ( $config->{Monthly} ) {
			HomeCo::AWS::BackupImageCacher::_backup_monthly( $config );
		}
	};
	if ( $@ ) {
		die( $@ );
	}
}

sub _backup_daily () {

}

sub _backup_monthly () {

}

sub _tar_size_directory () {
	# file path are somehow limited. If path are to long additional info blocks might be generated by tar, since we are streaming we could get into trouble with maximum file pieces


}

sub check_parameters () {
	my $config = $_;

	die("No BaseThumbs defined.") unless defined $config->{BaseThumbs};
	die("BaseThumbs does not exist.") unless -d $config->{BaseThumbs};
	die("No BaseImageCache defined.") unless defined  $config->{BaseImageCache};
	die("BaseImageCache does not exist.") unless -d $config->{BaseImageCache};
	die("VaultRegion does not exist. Set an AWS Region.") unless -d $config->{VaultRegion};
	die("VaultName does not exist. Set an existing AWS Glacier Vault.") unless -d $config->{VaultRegion};
	die("AWSCredentials file does not exist. Provide valid AWS Credetials-") unless -e $config->{AWSCredentials};

	# check date is valid
	die("Provided date is invalid " . $config->{Date} . ".") unless eval {
		my ($year, $month, $day) = unpack "A4 A2 A2", $config->{Date},;
		timelocal(0,0,0,$day, $month-1, $year);
		1;
	}

	# either daily or monthly
	die("Cannot request daily and monthly backup in a single run.") if ( $config->{Daily} && $config->{Monthly} );
	die("Either daily or monthly must be specified.") if ( !$config->{Daily} && !$config->{Monthly} );

	$config->{_checked} = 1;
}
